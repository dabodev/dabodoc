<chapter id="dabo-ch-6">
	<title>Dabo Objects</title>

<sect1 id="dabo-ch-6-sect-1">
	<title>dObject of My Affection</title>

	<para>Every public class in Dabo has a lowercase 'd' prepended, and dObject is the most basic of all the Dabo classes. Every class in the Dabo framework descends from dObject, which provides general functionality, basic properties, and event handling. You will rarely, if ever, create classes that subclass dObject directly, but understanding everything that dObject provides will greatly help your understanding of Dabo.</para>
	
	<note>See <xref linkend="dabo-pt-4"/>, which covers all the properties, events, and methods of dObject and every other object in detail. The section here only covers those properties, events, and methods that you will commonly use in practice.</note>
	
	<figure id="fig-dObject-1"><title>All objects are based on dObject.</title>
		<imageobject>
			<imagedata fileref="images/dObject.png" format="PNG"/>
		</imageobject>
	</figure>

	<sect2>
		<title>dObject Properties</title>
		
		<para>Properties in Dabo always start with an upper-case letter, and are in inter-caps style, such as <command>LogEvents</command> and <command>Name</command>. Properties are best thought of as class instance variables: they provide a place to store an important value. dObject provides the most basic properties used in Dabo, and are listed here.</para>
		
		<itemizedlist>
			<listitem>
				<para><emphasis>Application</emphasis> stores a reference to the Application object in use, which will be a subclass of dApp, or None if there is no Application object in use. This is basically a convenience, and means that accessing features of dApp is as easy as writing something like <command>sm = self.Application.SecurityManager</command>.</para>
			</listitem>
			<listitem>
				<para><emphasis>LogEvents</emphasis> is a list of events to log, and is useful for debugging purposes. If you want to track all events, set it to <command>["All"]</command>. If you want to track just certain events, set it explicitly, as in <command>["GotFocus", "LostFocus"]</command>. And finally, if you want to see all events except for some other events, set it to something like <command>["All", "Idle", "Paint", "MouseMove"]</command>.</para>
			</listitem>
			<listitem>
				<para><emphasis>Name</emphasis> stores the object's identifier, which must be unique among siblings. If <command>Application.AutoNegotiateUniqueNames</command> is set to <command>True</command> (the default), a non-unique <command>Name</command> assignment will result in an integer getting appended to the name to make it unique. Otherwise, a Python <command>ValueError</command> exception will be raised.</para>
			</listitem>
			<listitem>
				<para><emphasis>Parent</emphasis> stores an object reference to the containing object, or <command>None</command> if there is no parent.</para>
			</listitem>
		</itemizedlist>
			
	</sect2>

	<sect2>
		<title>dObject Methods</title>
		
		<para>dObject provides a few methods that you will call over and over again in your code.</para>
	
		<itemizedlist>
			<listitem>
				<para><emphasis>bindEvent()</emphasis> lets your custom code run whenever a certain event occurs. For instance, if the user presses a CommandButton, you will usually want your form to take some action. To accomplish this, you need to define a method of your form to act as the callback function, and call the command button's <command>bindEvent()</command> method to link the event with the callback function. For example, see <xref linkend="dabo-example-ch-6-1"/> where the custom <command>onHit()</command> method is run whenever the user changes the state of the CheckBox. The full syntax of <command>bindEvent()</command> is:</para><screen>
self.bindEvent(<replaceable>EventClass</replaceable>, <replaceable>CallbackFunction</replaceable>)
</screen>

				<para>See also the <command>EventBindings</command> property, the <command>unBindEvent()</command> method, and the complete list of Dabo events, which are detailed in <xref linkend="dabo-pt-4"/>.</para>
			</listitem>
				
			<listitem>
				<para><emphasis>doDefault()</emphasis> simply runs the code in the superclass method. The full syntax is:<screen>
ret = class.doDefault([arg1[, arg2...]])
</screen>
			This is slightly easier than using Python's <command>super()</command> function. The <command>class</command> is the class reference that <command>self</command> is an instance of. For example, here is a full class definition, showing the use of <command>doDefault()</command>:</para>
			
			<example id="dabo-example-ch-6-1">
				<title>Subclass of dCheckBox</title>
				<screen linenumbering="numbered">
import dabo

dabo.ui.loadUI("wx")

class MyCheckBox(dabo.ui.dCheckBox):
	def afterInit(self):
		MyCheckBox.doDefault()
		self.Caption = "Test Checkbox"
		self.bindEvent(dabo.dEvents.Hit, self.onHit)
		
	def onHit(self, evt):
		print "Checkbox hit!"

if __name__ == "__main__":
	app = dabo.dApp()
	app.setup()
	app.MainFrame.addObject(MyCheckBox, "chkTest")
	app.start()

</screen></example>
	
		<note>The above code is a working script, and will show your checkbox and will print your message when clicked, if you save it to disk and run it with <screen>
python test.py
</screen></note>

			<para>	Line 7 in the example code calls <command>doDefault()</command>, which runs the code in the superclass of MyCheckBox. In this case, it runs the code in dabo.ui.dCheckBox.afterInit() and sends no parameters. You can keep the superclass code from running by not calling doDefault().</para>
	
	<para>In general, always call doDefault(), unless you know that you definitely want to 	suppress the superclass code.</para>
	
			</listitem>
			<listitem>
				<para><emphasis>raiseEvent()</emphasis> lets you manually raise a Dabo event, or your own custom event based on dEvent. The full syntax is:</para><screen>
self.raiseEvent(<replaceable>EventClass</replaceable>)
</screen>
			</listitem>
		</itemizedlist>
	</sect2>
</sect1>
</chapter>
