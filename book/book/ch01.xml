<chapter id="dabo-ch-1">

<title>What Is Dabo?</title>

<simplesect>

	<para>Dabo provides an abstraction layer for a variety of open source projects, for the purpose of providing a solid and flexible framework for developing multiplatform data-aware business applications. User/developers can use the powerful Python programming language to write their business logic and lay out their user-interface elements, harnessing the Dabo framework and thus not getting preoccupied with the implementation details.</para>
	
</simplesect>


<!-- ================================================================= -->
<!-- ======================== SECTION 1 ============================== -->
<!-- ================================================================= -->
<sect1 id="dabo-ch-1-sect-1">

	<title>3-Tier</title>
	<para><indexterm><primary>3-tier</primary></indexterm>Dabo provides a 3-tier approach to application design, separating database access from business rules from user-interface layout. Dabo also provides an Application object that provides common functions and controls the event loop. This 3-tier relationship can be seen in <xref linkend="fig-3tier-1"/>.</para>

	<figure id="fig-3tier-1"><title>Dabo's 3-Tiers</title>
		<imageobject>
			<imagedata fileref="images/tiers.png" format="PNG"/>
		</imageobject>
	</figure>

	<para>Dabo allows you to use each tier independently, for instance only using the database tier for a simple script, or only using the UI tier for a simple GUI app that doesn't need database access. But those use-cases will be limited. In a typical Dabo application, 90% of the user code will end up in the business tier, using subclasses of the Dabo Business Object, 0% in the database tier, and the rest as layout code in the user-interface tier.</para>
	
	<para>Dabo's tiers are related in a chain-of-responsibility pattern, so that when a user chooses, for example, to save their changes, the user-interface will communicate that request to the business object, which will validate the request against the business rules, and if all rules pass the request will go to the database tier to actually save the change to the database. If the change fails, such as in the business object for validation reasons, or in the database tier for connectivity reasons, the exception gets progagated back up to the user-interface tier and the user is notified.</para>

</sect1>

<!-- ================================================================= -->
<!-- ======================== SECTION 2 ============================== -->
<!-- ================================================================= -->
<sect1 id="dabo-ch-1-sect-2">

	<title>Flexible Database Support</title>

	<para>Dabo supports all databases for which there is a Python wrapper that conforms to the dbapi version 2. This includes all popular databases, as illustrated in <xref linkend="fig-tier1-1"/>. <warning>Please note that this book is being written for future benefit, and that as of this writing the only supported databases are MySQL, Firebird, and Sqlite, and MySQL is the most tested.</warning></para>
	
	<figure id="fig-tier1-1"><title>Supported databases.</title>
		<imageobject>
			<imagedata fileref="images/tier1.png" format="PNG"/>
		</imageobject>
	</figure>

</sect1>

<!-- ================================================================= -->
<!-- ======================== SECTION 3 ============================== -->
<!-- ================================================================= -->
<sect1 id="dabo-ch-1-sect-3">

	<title>Flexible User-Interface Support</title>

	<para>After version 1.0, Dabo will support a selection of user-interface libraries, as illustrated in <xref linkend="fig-tier3-1"/>. The support of multiple libraries while allowing the Dabo developer to use a common API makes Dabo a very flexible, powerful solution. Different toolkits have their pros and cons; you can choose which one to deploy and not worry too much about that during development. You could conceivably do all your development using one toolkit and deploy with another. You may have one deployment using PyQt, and another using wxPython, both using the same codebase. <warning>Please note that this book is being written for future benefit, and that as of this writing the only supported user interface is wxPython.</warning></para>
	
	<figure id="fig-tier3-1"><title>Supported UI toolkits after 1.0</title>
		<imageobject>
			<imagedata fileref="images/tier3.png" format="PNG"/>
		</imageobject>
	</figure>

</sect1>

<!-- ================================================================= -->
<!-- ======================== SECTION 4 ============================== -->
<!-- ================================================================= -->
<sect1 id="dabo-ch-1-sect-4">

	<title>Flexible Platform Support</title>

<para>Dabo is truly multi-platform. Develop on any supported platform, and deploy the same code base to any supported platform. The supported platforms are Macintosh OS X (10.2 or higher), Linux, and Windows (98SE or higher). <xref linkend="fig-multiplatform-lin"/>, <xref linkend="fig-multiplatform-osx"/>, and <xref linkend="fig-multiplatform-win"/> show the same Dabo-developed application running on all three platforms.</para>
	
	<figure id="fig-multiplatform-lin"><title>Dabo application running on Linux</title>
		<imageobject>
			<imagedata fileref="images/multiplatform-lin.png" format="PNG"/>
		</imageobject>
	</figure>

	<figure id="fig-multiplatform-osx"><title>Dabo application running on Macintosh</title>
		<imageobject>
			<imagedata fileref="images/multiplatform-osx.png" format="PNG"/>
		</imageobject>
	</figure>

	<figure id="fig-multiplatform-win"><title>Dabo application running on Windows</title>
		<imageobject>
			<imagedata fileref="images/multiplatform-win.png" format="PNG"/>
		</imageobject>
	</figure>

</sect1>

<!-- ================================================================= -->
<!-- ======================== SECTION 5 ============================== -->
<!-- ================================================================= -->
<sect1 id="dabo-ch-1-sect-5">

	<title>Summary</title>

<para>Dabo is a framework built on Python that provides a clean API for developers to build data-aware business applications that are cross-platform. In addition to this underlying framework, Dabo also provides some power tools, such as a visual UI designer based on wxGlade, for designing and laying out your forms, menus, and other UI elements, and wizards and demo applications for getting started. These power tools are discussed elsewhere in this book.</para>

</sect1>

</chapter>
